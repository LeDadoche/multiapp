// --- Configuration Dropbox ---
const DROPBOX_APP_KEY = "sx9tl18fkusxm05";
const DROPBOX_FILE = "/transactions.json";

// --- Configuration pour d'autres services cloud (Google Drive et Microsoft OneDrive)
// Remplacez ces identifiants client par les vôtres pour activer l'authentification OAuth.
const GOOGLE_CLIENT_ID = "REPLACE_WITH_GOOGLE_CLIENT_ID";
const MICROSOFT_CLIENT_ID = "REPLACE_WITH_MICROSOFT_CLIENT_ID";

// Jetons d'accès pour les différents services
let googleAccessToken = null;
let msAccessToken = null;

let dbx, accessToken = null;
let transactions = [];
let currentMonth = new Date();
let monthSortMode = 'date-asc'; // valeur initiale

// Utilitaires date
function addMonths(date, months) {
  const d = new Date(date);
  const newDate = new Date(d.getFullYear(), d.getMonth() + months, d.getDate());
  if (newDate.getDate() !== d.getDate()) newDate.setDate(0);
  return newDate;
}
function formatDate(date) {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  return `${year}-${month}-${day}`;
}

// Jours fériés France (calcul dynamique)
const FRENCH_HOLIDAYS = (year) => ({
  [`${year}-01-01`]: "Jour de l'An",
  [`${year}-05-01`]: "Fête du Travail",
  [`${year}-05-08`]: "Victoire 1945",
  [`${year}-07-14`]: "Fête Nationale",
  [`${year}-08-15`]: "Assomption",
  [`${year}-11-01`]: "Toussaint",
  [`${year}-11-11`]: "Armistice 1918",
  [`${year}-12-25`]: "Noël",
  ...(() => {
    function calcEaster(year) {
      const f = Math.floor, G = year % 19, C = f(year / 100), H = (C - f(C / 4) - f((8*C+13)/25) + 19*G + 15) % 30,
      I = H - f(H/28)*(1 - f(29/(H+1))*f((21-G)/11)),
      J = (year + f(year/4) + I + 2 - C + f(C/4)) % 7,
      L = I - J, month = 3 + f((L+40)/44), day = L + 28 - 31*f(month/4);
      return new Date(year, month-1, day);
    }
    let y = year;
    let easter = calcEaster(y);
    let pad = n => n.toString().padStart(2, "0");
    let d = (dt) => `${dt.getFullYear()}-${pad(dt.getMonth()+1)}-${pad(dt.getDate())}`;
    let holidays = {};
    let lundiPaques = new Date(easter); lundiPaques.setDate(easter.getDate() + 1);
    holidays[d(lundiPaques)] = "Lundi de Pâques";
    let ascension = new Date(easter); ascension.setDate(easter.getDate() + 39);
    holidays[d(ascension)] = "Ascension";
    let pentecote = new Date(easter); pentecote.setDate(easter.getDate() + 50);
    holidays[d(pentecote)] = "Lundi de Pentecôte";
    return holidays;
  })()
});

// --- Auth Dropbox
function isDropboxConnected() {
  return !!accessToken;
}
function loginDropbox() {
  const redirectUri = window.location.origin + window.location.pathname;
  const authUrl = `https://www.dropbox.com/oauth2/authorize?client_id=${DROPBOX_APP_KEY}&response_type=token&redirect_uri=${encodeURIComponent(redirectUri)}`;
  window.location.href = authUrl;
}
function parseDropboxTokenFromUrl() {
  if (window.location.hash.startsWith("#access_token=")) {
    const params = new URLSearchParams(window.location.hash.substr(1));
    accessToken = params.get("access_token");
    window.localStorage.setItem("dropbox_token", accessToken);
    window.location.hash = "";
  }
}
function restoreDropboxSession() {
  const saved = window.localStorage.getItem("dropbox_token");
  if (saved) accessToken = saved;
}
function updateDropboxStatus() {
  const status = document.getElementById('dropbox-status');
  const logoutBtn = document.getElementById('dropbox-logout');
  const loginBtn = document.getElementById('dropbox-login');
  if (!status) return;
  if (isDropboxConnected()) {
    status.textContent = "Connecté à Dropbox";
    status.style.color = "#27524b";
    loginBtn.style.display = "none";
    logoutBtn.style.display = "";
  } else {
    status.textContent = "Non connecté";
    status.style.color = "#d32f2f";
    loginBtn.style.display = "";
    logoutBtn.style.display = "none";
  }
}

// Handler déconnexion
function logoutDropbox() {
  accessToken = null;
  localStorage.removeItem('dropbox_token');
  updateDropboxStatus();
  // On repasse en local uniquement
  loadTransactionsLocal();
  updateViews();
}

async function loadTransactionsDropbox() {
  try {
    const response = await dbx.filesDownload({path: DROPBOX_FILE});
    const blob = response.result.fileBlob || response.result.fileBinary;
    const text = await blob.text();
    transactions = JSON.parse(text);
    saveTransactionsLocal();
    updateViews();
  } catch (e) {
    transactions = [];
    updateViews();
  }
}

async function saveTransactionsDropbox() {
  if (!dbx || !accessToken) return;
  try {
    await dbx.filesUpload({
      path: DROPBOX_FILE,
      contents: JSON.stringify(transactions, null, 2),
      mode: { ".tag": "overwrite" }
    });
  } catch (e) {
    alert("Erreur lors de la sauvegarde Dropbox : " + JSON.stringify(e.error || e));
    throw e;
  }
}

// === Fonctions utilitaires pour l'intégration d'autres services cloud ===

// Vérifie la présence d'un jeton Google
function isGoogleConnected() {
  return !!googleAccessToken;
}

// Vérifie la présence d'un jeton Microsoft
function isMSConnected() {
  return !!msAccessToken;
}

// Lance le flux OAuth Google Drive. Avant la redirection, on enregistre le service dans sessionStorage
function loginGoogle() {
  const redirectUri = window.location.origin + window.location.pathname;
  sessionStorage.setItem('oauth_service', 'google');
  const authUrl =
    `https://accounts.google.com/o/oauth2/v2/auth?client_id=${GOOGLE_CLIENT_ID}` +
    `&response_type=token` +
    `&redirect_uri=${encodeURIComponent(redirectUri)}` +
    `&scope=${encodeURIComponent('https://www.googleapis.com/auth/drive.file')}` +
    `&state=google`;
  window.location.href = authUrl;
}

// Lance le flux OAuth Microsoft OneDrive. On enregistre également le service dans sessionStorage
function loginMS() {
  const redirectUri = window.location.origin + window.location.pathname;
  sessionStorage.setItem('oauth_service', 'ms');
  const authUrl =
    `https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=${MICROSOFT_CLIENT_ID}` +
    `&response_type=token` +
    `&redirect_uri=${encodeURIComponent(redirectUri)}` +
    `&scope=${encodeURIComponent('Files.ReadWrite offline_access')}` +
    `&state=ms`;
  window.location.href = authUrl;
}

// Analyse l'URL pour extraire les jetons OAuth renvoyés par Google ou Microsoft
function parseCloudTokensFromUrl() {
  if (window.location.hash.startsWith('#access_token=')) {
    const params = new URLSearchParams(window.location.hash.substr(1));
    const token = params.get('access_token');
    const state = params.get('state') || sessionStorage.getItem('oauth_service');
    // Nettoie le fragment pour éviter des boucles infinies
    window.location.hash = '';
    if (!token) return;
    if (state === 'google') {
      googleAccessToken = token;
      localStorage.setItem('google_token', googleAccessToken);
    } else if (state === 'ms') {
      msAccessToken = token;
      localStorage.setItem('ms_token', msAccessToken);
    }
    sessionStorage.removeItem('oauth_service');
  }
}

// Restaure les sessions Google et Microsoft depuis le stockage local
function restoreGoogleSession() {
  const saved = localStorage.getItem('google_token');
  if (saved) googleAccessToken = saved;
}

function restoreMicrosoftSession() {
  const saved = localStorage.getItem('ms_token');
  if (saved) msAccessToken = saved;
}

// Met à jour l'état de l'interface Google
function updateGoogleStatus() {
  const status = document.getElementById('google-status');
  const logoutBtn = document.getElementById('google-logout');
  const loginBtn = document.getElementById('google-login');
  if (!status) return;
  if (isGoogleConnected()) {
    status.textContent = 'Connecté à Google';
    status.style.color = '#27524b';
    loginBtn.style.display = 'none';
    logoutBtn.style.display = '';
  } else {
    status.textContent = 'Non connecté';
    status.style.color = '#d32f2f';
    loginBtn.style.display = '';
    logoutBtn.style.display = 'none';
  }
}

// Met à jour l'état de l'interface Microsoft
function updateMSStatus() {
  const status = document.getElementById('ms-status');
  const logoutBtn = document.getElementById('ms-logout');
  const loginBtn = document.getElementById('ms-login');
  if (!status) return;
  if (isMSConnected()) {
    status.textContent = 'Connecté à Microsoft';
    status.style.color = '#27524b';
    loginBtn.style.display = 'none';
    logoutBtn.style.display = '';
  } else {
    status.textContent = 'Non connecté';
    status.style.color = '#d32f2f';
    loginBtn.style.display = '';
    logoutBtn.style.display = 'none';
  }
}

// Déconnecte les services
function logoutGoogle() {
  googleAccessToken = null;
  localStorage.removeItem('google_token');
  updateGoogleStatus();
}

function logoutMS() {
  msAccessToken = null;
  localStorage.removeItem('ms_token');
  updateMSStatus();
}

// === Gestion de l'authentification locale (mot de passe) ===

// Calcule un hash SHA‑256 d'une chaîne via l'API Web Crypto
async function hashPassword(password) {
  const enc = new TextEncoder().encode(password);
  const buffer = await crypto.subtle.digest('SHA-256', enc);
  return Array.from(new Uint8Array(buffer)).map(b => b.toString(16).padStart(2, '0')).join('');
}

// Affiche une fenêtre modale demandant la création ou l'entrée d'un mot de passe avant d'utiliser l'application
function setupAuthentication(callback) {
  const overlay = document.getElementById('auth-overlay');
  const titleEl = document.getElementById('auth-title');
  const confirmRow = document.getElementById('auth-confirm-row');
  const form = document.getElementById('auth-form');
  const pwdInput = document.getElementById('auth-password');
  const confirmInput = document.getElementById('auth-password-confirm');

  const storedHash = localStorage.getItem('appPasswordHash');

  // 1) Si la session est déjà déverrouillée dans cet onglet, on ne redemande pas le mot de passe
  if (sessionStorage.getItem('unlocked') === '1') {
    if (typeof callback === 'function') callback();
    return;
  }

  // 2) Sinon, on affiche la modale en mode "création" ou "connexion"
  if (!storedHash) {
    titleEl.textContent = 'Créer un mot de passe';
    confirmRow.style.display = 'flex';     // on affiche la confirmation
    confirmInput.value = '';               // validation côté JS
    pwdInput.setAttribute('autocomplete', 'new-password');
  } else {
    titleEl.textContent = 'Authentification requise';
    confirmRow.style.display = 'none';     // champ caché et NON required
    pwdInput.value = '';
    pwdInput.setAttribute('autocomplete', 'current-password');
  }

  overlay.style.display = 'flex';
  pwdInput.focus();

  form.onsubmit = async (e) => {
    e.preventDefault(); // validation manuelle

    const pwd = (pwdInput.value || '').trim();
    if (!storedHash) {
      // Création
      const confirm = (confirmInput.value || '').trim();
      if (!pwd || !confirm) {
        alert('Merci de saisir et confirmer le mot de passe.');
        return;
      }
      if (pwd !== confirm) {
        alert('Les mots de passe ne correspondent pas.');
        return;
      }
      const hash = await hashPassword(pwd);
      localStorage.setItem('appPasswordHash', hash);
      // Marque la session comme déverrouillée pour cet onglet
      sessionStorage.setItem('unlocked', '1');
      overlay.style.display = 'none';
      if (typeof callback === 'function') callback();
    } else {
      // Connexion
      if (!pwd) {
        alert('Merci de saisir votre mot de passe.');
        return;
      }
      const hash = await hashPassword(pwd);
      if (hash === storedHash) {
        sessionStorage.setItem('unlocked', '1'); // déverrouille la session de cet onglet
        overlay.style.display = 'none';
        if (typeof callback === 'function') callback();
      } else {
        alert('Mot de passe incorrect.');
        pwdInput.focus();
        pwdInput.select();
      }
    }
  };
}


// --- Données des icônes par onglet ---
const CATEGORY_ICONS = {
  fa: [
    { type: 'fa', icon: 'fa-utensils', label: 'Repas' },
    { type: 'fa', icon: 'fa-cart-shopping', label: 'Courses' },
    { type: 'fa', icon: 'fa-car', label: 'Transport' },
    { type: 'fa', icon: 'fa-house', label: 'Logement' },
    { type: 'fa', icon: 'fa-film', label: 'Loisirs' },
    { type: 'fa', icon: 'fa-medkit', label: 'Santé' },
    { type: 'fa', icon: 'fa-graduation-cap', label: 'Éducation' },
    { type: 'fa', icon: 'fa-gas-pump', label: 'Essence' },
    { type: 'fa', icon: 'fa-dog', label: 'Animaux' },
    { type: 'fa', icon: 'fa-gift', label: 'Cadeaux' },
    { type: 'fa', icon: 'fa-sack-dollar', label: 'Salaire' },
    { type: 'fa', icon: 'fa-phone', label: 'Téléphone' }
  ],
  mi: [
    { type: 'mi', icon: 'savings', label: 'Épargne' },
    { type: 'mi', icon: 'subscriptions', label: 'Abonnements' },
    { type: 'mi', icon: 'sports_esports', label: 'Jeux' },
    { type: 'mi', icon: 'flight', label: 'Voyage' },
    { type: 'mi', icon: 'pets', label: 'Animaux' },
    { type: 'mi', icon: 'restaurant', label: 'Restaurant' },
    { type: 'mi', icon: 'store', label: 'Magasin' },
    { type: 'mi', icon: 'health_and_safety', label: 'Santé' },
    { type: 'mi', icon: 'directions_car', label: 'Voiture' },
    { type: 'mi', icon: 'home', label: 'Maison' }
  ],
  bs: [
    { type: 'bs', icon: 'bi-currency-euro', label: 'Banque' },
    { type: 'bs', icon: 'bi-basket2-fill', label: 'Courses (Bootstrap)' },
    { type: 'bs', icon: 'bi-house', label: 'Maison (Bootstrap)' },
    { type: 'bs', icon: 'bi-airplane', label: 'Avion' },
    { type: 'bs', icon: 'bi-car-front', label: 'Voiture (Bootstrap)' },
    { type: 'bs', icon: 'bi-cup-hot', label: 'Café' },
    { type: 'bs', icon: 'bi-emoji-smile', label: 'Fun' },
    { type: 'bs', icon: 'bi-heart-pulse', label: 'Santé (Bootstrap)' },
    { type: 'bs', icon: 'bi-bag', label: 'Course' }
  ]
};

// Charge les Bootstrap Icons si pas déjà fait (sécurité)
if (!document.querySelector('link[href*="bootstrap-icons"]')) {
  const link = document.createElement('link');
  link.rel = 'stylesheet';
  link.href = 'https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css';
  document.head.appendChild(link);
}

// Fonction pour afficher le picker avec onglets
function renderCategoryPicker() {
  const picker = document.getElementById('category-dropdown');
  const selectedCat = document.getElementById('selected-category');

  if (!picker || !selectedCat) return;

  // Génère le contenu de chaque onglet
  ['fa', 'mi', 'bs'].forEach(type => {
    const container = picker.querySelector(`.icon-picker-list[data-tab="${type}"]`);
    container.innerHTML = '';
    CATEGORY_ICONS[type].forEach(cat => {
      const span = document.createElement('span');
      span.className = 'cat-icon';
      span.title = cat.label;

      if (cat.type === 'fa') span.innerHTML = `<i class="fa-solid ${cat.icon}"></i>`;
      else if (cat.type === 'mi') span.innerHTML = `<span class="material-icons">${cat.icon}</span>`;
      else if (cat.type === 'bs') span.innerHTML = `<i class="bi ${cat.icon}"></i>`;

      span.addEventListener('click', (e) => {
        e.stopPropagation();
        document.getElementById('category').value = JSON.stringify(cat);
        selectedCat.innerHTML = span.innerHTML;
        selectedCat.dataset.placeholder = "";
        picker.style.display = 'none';
      });

      container.appendChild(span);
    });
  });

  // Gestion des onglets
  picker.querySelectorAll('.icon-tab').forEach(btn => {
    btn.addEventListener('click', function () {
      picker.querySelectorAll('.icon-tab').forEach(b => b.classList.remove('active'));
      btn.classList.add('active');

      picker.querySelectorAll('.icon-picker-list').forEach(list => {
        list.style.display = (list.dataset.tab === btn.dataset.tab) ? 'grid' : 'none';
      });
    });
  });
}

function setupCategoryPicker() {
  const picker = document.getElementById('category-dropdown');
  const selectedCat = document.getElementById('selected-category');

  if (!picker || !selectedCat) return;

  selectedCat.innerHTML = `<i class="fa-regular fa-circle-question"></i>`;
  selectedCat.dataset.placeholder = "1";

  selectedCat.addEventListener('click', (e) => {
    e.stopPropagation();
    picker.style.display = picker.style.display === 'block' ? 'none' : 'block';
  });

  document.addEventListener('click', e => {
    if (!e.target.closest('.category-picker')) {
      picker.style.display = 'none';
    }
  });
}

function setupCategoryPickerCustom(baseId) {
  const picker = document.getElementById(`${baseId}-category-dropdown`);
  const selectedCat = document.getElementById(`${baseId}-selected-category`);
  const hiddenInput = document.getElementById(`${baseId}-category`);

  if (!picker || !selectedCat || !hiddenInput) return;

  // Remet l’icône de départ
  selectedCat.innerHTML = `<i class="fa-regular fa-circle-question"></i>`;
  selectedCat.dataset.placeholder = "1";

  // Génère les onglets
  ['fa', 'mi', 'bs'].forEach(type => {
    const container = picker.querySelector(`.icon-picker-list[data-tab="${type}"]`);
    container.innerHTML = '';
    CATEGORY_ICONS[type].forEach(cat => {
      const span = document.createElement('span');
      span.className = 'cat-icon';
      span.title = cat.label;

      if (cat.type === 'fa') span.innerHTML = `<i class="fa-solid ${cat.icon}"></i>`;
      else if (cat.type === 'mi') span.innerHTML = `<span class="material-icons">${cat.icon}</span>`;
      else if (cat.type === 'bs') span.innerHTML = `<i class="bi ${cat.icon}"></i>`;

      span.addEventListener('click', (e) => {
        e.stopPropagation();
        hiddenInput.value = JSON.stringify(cat);
        selectedCat.innerHTML = span.innerHTML;
        selectedCat.dataset.placeholder = "";
        picker.style.display = 'none';
      });

      container.appendChild(span);
    });
  });

  // Tab switching
  picker.querySelectorAll('.icon-tab').forEach(btn => {
    btn.addEventListener('click', function () {
      picker.querySelectorAll('.icon-tab').forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
      picker.querySelectorAll('.icon-picker-list').forEach(list => {
        list.style.display = (list.dataset.tab === btn.dataset.tab) ? 'grid' : 'none';
      });
    });
  });

  selectedCat.addEventListener('click', (e) => {
    e.stopPropagation();
    picker.style.display = picker.style.display === 'block' ? 'none' : 'block';
  });

  document.addEventListener('click', e => {
    if (!e.target.closest(`#${baseId}-category-picker`)) {
      picker.style.display = 'none';
    }
  });
}

// --- Storage local
function saveTransactionsLocal() {
  localStorage.setItem('transactions', JSON.stringify(transactions));
}
function loadTransactionsLocal() {
  const saved = localStorage.getItem('transactions');
  if (saved) {
    try { transactions = JSON.parse(saved); } catch(e) {}
  }
}

function addTransaction(event) {
  event.preventDefault();
  const type = document.getElementById('type').value;
  const categoryRaw = document.getElementById('category').value;
  const category = categoryRaw ? JSON.parse(categoryRaw) : null;
  const description = document.getElementById('description').value.trim();
  const amountValue = parseFloat(document.getElementById('amount').value);
  const dateValue = document.getElementById('date').value;
  const recurrence = document.getElementById('recurrence').value;
  const applyPrevious = document.getElementById('apply-previous').checked;

  if (!description || isNaN(amountValue) || !dateValue || !category) {
    alert('Veuillez remplir tous les champs obligatoires, y compris la catégorie.');
    return;
  }
  const id = Date.now();

  // Ajout simple, sans duplication par mois
  const tx = {
    id: id,
    type,
    category,
    description,
    amount: amountValue,
    date: dateValue,
    recurrence,
    applyPrevious,
  };
  transactions.push(tx);

  saveTransactionsLocal();
  if (isDropboxConnected()) saveTransactionsDropbox();
  updateViews();
  event.target.reset();
  document.getElementById('installments-row').style.display = 'none';
  document.getElementById('apply-previous-row').style.display = 'none';
  document.getElementById('category').value = '';
  document.getElementById('selected-category').innerHTML = `<i class="fa-regular fa-circle-question"></i>`;
  document.getElementById('selected-category').dataset.placeholder = "1";
}

// Transactions pour un jour (récurrences incluses)
function transactionsForDay(dateString) {
  const selectedDate = new Date(dateString);
  const day = selectedDate.getDate();
  const list = [];
  for (const tx of transactions) {
    const txDate = new Date(tx.date);
    if (tx.recurrence === 'monthly') {
      // Si la date du mois courant >= date de départ de la transaction récurrente
      if (
        txDate.getDate() === day &&
        (selectedDate.getFullYear() > txDate.getFullYear() ||
         (selectedDate.getFullYear() === txDate.getFullYear() && selectedDate.getMonth() >= txDate.getMonth()))
      ) {
        list.push({ ...tx, date: formatDate(selectedDate) });
      }
    } else if (formatDate(txDate) === dateString) {
      list.push(tx);
    }
  }
  return list;
}

// --- CALENDRIER
function renderCalendar() {
  const calendar = document.getElementById('calendar');
  calendar.innerHTML = '';
  const year = currentMonth.getFullYear();
  const month = currentMonth.getMonth();
  const today = new Date();
  const todayStr = formatDate(today);

  const monthStart = new Date(year, month, 1);
  const monthEnd = new Date(year, month + 1, 0);
  const daysInMonth = monthEnd.getDate();

  const dayNames = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche'];
  const headerRow = document.createElement('tr');
  for (const name of dayNames) {
    const th = document.createElement('th');
    th.textContent = name;
    headerRow.appendChild(th);
  }
  calendar.appendChild(headerRow);

  const firstDayIndex = (monthStart.getDay() + 6) % 7;
  let dateCounter = 1;
  const holidays = FRENCH_HOLIDAYS(year);

  let weeks = Math.ceil((daysInMonth + firstDayIndex) / 7);
  for (let row = 0; row < weeks; row++) {
    const tr = document.createElement('tr');
    for (let col = 0; col < 7; col++) {
      const td = document.createElement('td');
      if (row === 0 && col < firstDayIndex) {
        td.innerHTML = '&nbsp;';
      } else if (dateCounter > daysInMonth) {
        td.innerHTML = '&nbsp;';
      } else {
        const dateObj = new Date(year, month, dateCounter);
        const dateString = formatDate(dateObj);

        const divDayNumber = document.createElement('div');
        divDayNumber.className = 'day-number';
        divDayNumber.textContent = dateCounter;
        td.appendChild(divDayNumber);

        const txDay = transactionsForDay(dateString);
        txDay.forEach(tx => {
          const dot = document.createElement('span');
          dot.className = 'event-dot';
          if (tx.category && tx.category.type === 'fa') {
            dot.innerHTML = `<i class="fa-solid ${tx.category.icon}"></i>`;
          } else if (tx.category && tx.category.type === 'mi') {
            dot.innerHTML = `<span class="material-icons">${tx.category.icon}</span>`;
          } else {
            dot.style.backgroundColor = tx.type === 'income' ? '#4caf50' : '#e53935';
          }
          td.appendChild(dot);
        });

        td.dataset.date = dateString;
        td.addEventListener('click', () => {
          displayDayDetails(dateString);
          const allCells = calendar.querySelectorAll('td');
          allCells.forEach(c => c.classList.remove('selected'));
          td.classList.add('selected');
        });

        // *** Ajoute le double-clic pour ajouter une transaction rapide ***
        td.addEventListener('dblclick', () => {
          openAddTransactionModal(dateString);
        });

        const dayOfWeek = (dateObj.getDay() + 6) % 7;
        if (dayOfWeek >= 5) td.classList.add('calendar-weekend');
        if (holidays[dateString]) {
          td.classList.add('calendar-holiday');
          td.title = holidays[dateString];
        }
        if (dateString === formatDate(today) && year === today.getFullYear() && month === today.getMonth()) {
          td.classList.add('calendar-today');
        }
        dateCounter++;
      }
      tr.appendChild(td);
    }
    calendar.appendChild(tr);
  }
  const monthNames = [
    'Janvier','Février','Mars','Avril','Mai','Juin','Juillet','Août','Septembre','Octobre','Novembre','Décembre'
  ];
  document.getElementById('current-month').textContent = `${monthNames[month]} ${year}`;
}

function displayDayDetails(dateString) {
  const container = document.getElementById('day-details');
  const txDay = transactionsForDay(dateString);
  if (txDay.length === 0) {
    container.innerHTML = '<p>Aucune transaction pour ce jour.</p>';
    return;
  }
  let html = `<h3>Détails du ${dateString}</h3>`;
  html += '<ul>';
  txDay.forEach(tx => {
    const amountStr = `${tx.amount.toFixed(2)} €`;
    let icon = '';
    if (tx.category && tx.category.type === 'fa')
      icon = `<i class="fa-solid ${tx.category.icon}" style="margin-right:6px"></i>`;
    else if (tx.category && tx.category.type === 'mi')
      icon = `<span class="material-icons" style="font-size:1em;margin-right:6px">${tx.category.icon}</span>`;
    html += `<li>${icon}<strong>${tx.type === 'income' ? 'Revenu' : 'Dépense'} :</strong> ${tx.description} – <em>${amountStr}</em></li>`;
  });
  html += '</ul>';
  container.innerHTML = html;
}

// Liste des transactions
function renderTransactionList() {
  const list = document.getElementById('transactions-list');
  list.innerHTML = '';
  const sorted = [...transactions].sort((a,b) => new Date(a.date) - new Date(b.date));
  sorted.forEach(tx => {
    const li = document.createElement('li');
    let icon = '';
    if (tx.category && tx.category.type === 'fa')
      icon = `<i class="fa-solid ${tx.category.icon}" style="margin-right:8px"></i>`;
    else if (tx.category && tx.category.type === 'mi')
      icon = `<span class="material-icons" style="font-size:1em;margin-right:8px">${tx.category.icon}</span>`;
    const text = `${tx.date} – ${icon}${tx.description} – ${tx.type === 'income' ? '+' : '-'}${tx.amount.toFixed(2)} €`;
    li.innerHTML = text;
    const btnEdit = document.createElement('button');
    btnEdit.className = 'edit-btn';
    btnEdit.title = 'Modifier';
    btnEdit.textContent = '✎';
    btnEdit.addEventListener('click', () => {
      openEditTransactionModal(tx);
    });
    li.appendChild(btnEdit); // Place-le avant/sur la droite du bouton supprimer
    const btn = document.createElement('button');
    btn.className = 'remove-btn';
    btn.textContent = '×';
    btn.addEventListener('click', () => {
      if (confirm('Supprimer cette transaction ?')) {
        transactions = transactions.filter(item => item.id !== tx.id);
        saveTransactionsLocal();
        if (isDropboxConnected()) saveTransactionsDropbox();
        updateViews();
      }
    });
    li.appendChild(btn);
    list.appendChild(li);
  });
}
// Statistiques
function renderStats() {
  const chartContainer = document.getElementById('chart-container');
  chartContainer.innerHTML = '';
  const categoryTotals = {};
  let totalIncome = 0;
  let totalExpense = 0;
  for (const tx of transactions) {
    if (tx.recurrence === 'monthly') {
      totalExpense += tx.type === 'expense' ? tx.amount : 0;
      totalIncome += tx.type === 'income' ? tx.amount : 0;
      categoryTotals[tx.description] = (categoryTotals[tx.description] || 0) + tx.amount;
    } else {
      if (tx.type === 'income') totalIncome += tx.amount;
      else totalExpense += tx.amount;
      categoryTotals[tx.description] = (categoryTotals[tx.description] || 0) + tx.amount;
    }
  }
  const expenseCategories = Object.keys(categoryTotals).filter(desc =>
  transactions.some(tx => tx.description === desc && tx.type === 'expense')
  );
  expenseCategories.sort((a,b) => categoryTotals[b] - categoryTotals[a]);
  const maxVal = Math.max(...expenseCategories.map(desc => categoryTotals[desc]), 0);
  const colors = ['#e57373','#f06292','#ba68c8','#9575cd','#7986cb','#64b5f6','#4db6ac','#81c784','#dce775','#fff176','#ffd54f','#ffb74d','#ff8a65','#a1887f'];
  expenseCategories.forEach((desc, idx) => {
    const barRow = document.createElement('div');
    barRow.className = 'bar';
    const label = document.createElement('span');
    label.className = 'bar-label';
    label.textContent = desc;
    const value = document.createElement('div');
    value.className = 'bar-value';
    const percent = maxVal ? (categoryTotals[desc] / maxVal) * 100 : 0;
    value.style.width = `${percent}%`;
    value.style.backgroundColor = colors[idx % colors.length];
    value.title = `${categoryTotals[desc].toFixed(2)} €`;
    barRow.appendChild(label);
    barRow.appendChild(value);
    chartContainer.appendChild(barRow);
  });
  const statsInfo = document.getElementById('stats-info');
  statsInfo.innerHTML = `<strong>Total revenus :</strong> ${totalIncome.toFixed(2)} €<br>` +
  `<strong>Total dépenses :</strong> ${totalExpense.toFixed(2)} €<br>` +
  `<strong>Solde :</strong> ${(totalIncome - totalExpense).toFixed(2)} €`;
}
function calculateSavings() {
  const salaryVal = parseFloat(document.getElementById('salary').value);
  const savingsDesired = parseFloat(document.getElementById('savings').value);
  if (isNaN(salaryVal)) {
    alert('Veuillez saisir votre salaire.');
    return;
  }
  const month = currentMonth;
  let monthlyExpense = 0;
  transactions.forEach(tx => {
    if (tx.type === 'expense') {
      if (tx.recurrence === 'monthly') {
        monthlyExpense += tx.amount;
      } else {
        const d = new Date(tx.date);
        if (d.getFullYear() === month.getFullYear() && d.getMonth() === month.getMonth()) {
          monthlyExpense += tx.amount;
        }
      }
    }
  });
  const leftover = salaryVal - monthlyExpense - (isNaN(savingsDesired) ? 0 : savingsDesired);
  const result = document.getElementById('saving-result');
  if (!isNaN(savingsDesired)) {
    result.textContent = `Après avoir mis ${savingsDesired.toFixed(2)} € de côté et payé vos dépenses du mois, il vous restera ${leftover.toFixed(2)} €.`;
  } else {
    result.textContent = `Il vous restera ${leftover.toFixed(2)} € après vos dépenses.`;
  }
}

function renderPieChart() {
  const chartContainer = document.getElementById('chart-container');
  chartContainer.innerHTML = '<canvas id="pie-chart" width="300" height="300"></canvas>';

  const ctx = document.getElementById('pie-chart').getContext('2d');

  const categoryTotals = {};
  const expenseCategories = [];
  const colors = ['#e57373','#f06292','#ba68c8','#9575cd','#7986cb','#64b5f6','#4db6ac','#81c784','#dce775','#fff176','#ffd54f','#ffb74d','#ff8a65','#a1887f'];

  transactions.forEach(tx => {
    if (tx.type === 'expense') {
      categoryTotals[tx.description] = (categoryTotals[tx.description] || 0) + tx.amount;
      if (!expenseCategories.includes(tx.description)) {
        expenseCategories.push(tx.description);
      }
    }
  });

  new Chart(ctx, {
    type: 'pie',
    data: {
      labels: expenseCategories,
      datasets: [{
        data: expenseCategories.map(desc => categoryTotals[desc]),
        backgroundColor: colors.slice(0, expenseCategories.length),
      }]
    }
  });
}


function exportToJSON() {
  const dataStr = JSON.stringify(transactions, null, 2);
  const blob = new Blob([dataStr], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = 'transactions.json';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}
function updateViews() {
  renderCalendar();
  renderTransactionList();
  renderStats();
  renderMonthSummary();
}

// --- INIT ---
document.addEventListener('DOMContentLoaded', () => {
  // Démarre l'authentification avant de charger l'application
  setupAuthentication(() => {
    // Parse les éventuels jetons OAuth renvoyés par les services cloud
    parseDropboxTokenFromUrl();
    parseCloudTokensFromUrl();
    // Restaure les sessions depuis le stockage local
    restoreDropboxSession();
    restoreGoogleSession();
    restoreMicrosoftSession();
    // Initialise Dropbox si connecté, sinon charge les données locales
    if (isDropboxConnected()) {
      dbx = new Dropbox.Dropbox({ accessToken: accessToken });
      loadTransactionsDropbox();
    } else {
      loadTransactionsLocal();
      updateViews();
    }
    // Met à jour les statuts d'authentification pour chaque service
    updateDropboxStatus();
    updateGoogleStatus();
    updateMSStatus();

    // Prépare les pickers d'icônes (pour l'ajout rapide et le formulaire principal)
    setupCategoryPickerCustom('add');
    renderCategoryPicker();
    setupCategoryPicker();

    // Quand on clique sur le nouveau toggle, on rafraîchit la légende + calendrier
    document.getElementById('theme-toggle')?.addEventListener('click', () => {
      if (typeof updateLegendColors === 'function') updateLegendColors(true);
      if (typeof renderCalendar === 'function') renderCalendar();
    });


    // Écouteurs pour les services cloud
    document.getElementById('dropbox-login').addEventListener('click', loginDropbox);
    document.getElementById('dropbox-logout').addEventListener('click', logoutDropbox);
    document.getElementById('google-login').addEventListener('click', loginGoogle);
    document.getElementById('google-logout').addEventListener('click', logoutGoogle);
    document.getElementById('ms-login').addEventListener('click', loginMS);
    document.getElementById('ms-logout').addEventListener('click', logoutMS);

    // Gestion des onglets internes de la section finances
    document.querySelectorAll('.tab-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
        document.querySelectorAll('.tab-content').forEach(tab => tab.style.display = 'none');
        btn.classList.add('active');
        document.getElementById(btn.dataset.tab).style.display = 'block';
      });
    });

    // Gestion de la navigation de l'application multi‑modules
    document.querySelectorAll('.app-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        document.querySelectorAll('.app-btn').forEach(b => b.classList.remove('active'));
        document.querySelectorAll('.app-section').forEach(sec => sec.style.display = 'none');
        btn.classList.add('active');
        const target = document.getElementById('app-' + btn.dataset.app);
        if (target) target.style.display = 'block';
      });
    });

    // Autres écouteurs liés au formulaire principal et au calendrier
    document.getElementById('transaction-form').addEventListener('submit', addTransaction);
    document.getElementById('prev-month').addEventListener('click', () => {
      currentMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1);
      renderCalendar();
    });
    document.getElementById('next-month').addEventListener('click', () => {
      currentMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1);
      renderCalendar();
    });
    document.getElementById('go-today').addEventListener('click', () => {
      currentMonth = new Date();
      updateViews();
    });
    document.getElementById('calculate-saving').addEventListener('click', calculateSavings);
    document.getElementById('export-json').addEventListener('click', exportToJSON);
    document.getElementById('recurrence').addEventListener('change', e => {
      const val = e.target.value;
      const row = document.getElementById('installments-row');
      if (row) row.style.display = val === 'installments' ? 'flex' : 'none';
    });
    document.getElementById('group-by-category')?.addEventListener('change', () => {
      renderMonthSummary();
    });
    document.getElementById('month-sort-btn').addEventListener('click', () => {
      const icon = document.getElementById('month-sort-icon');
      // Cycle entre les 3 modes
      if (monthSortMode === 'date-asc') {
        monthSortMode = 'date-desc';
        icon.className = 'fa-solid fa-calendar-minus';
      } else if (monthSortMode === 'date-desc') {
        monthSortMode = 'amount-desc';
        icon.className = 'fa-solid fa-coins';
      } else {
        monthSortMode = 'date-asc';
        icon.className = 'fa-solid fa-calendar-day';
      }
      renderMonthSummary();
    });
    document.getElementById('month-sort')?.addEventListener('change', () => {
      renderMonthSummary();
    });

    // Définitions par défaut pour les couleurs du calendrier
    const DEFAULT_COLORS_LIGHT = {
      '--color-weekend': '#d1ecfb',
      '--color-holiday': '#fffbe6',
      '--color-today': '#fda7a7',
      '--color-primary': '#65b8f7',
    };
    const DEFAULT_COLORS_DARK = {
      '--color-weekend': '#223330',
      '--color-holiday': '#2f2a1f',
      '--color-today':   '#ffd166',
      '--color-primary': '#27524b'
    };
    function updateLegendColors(force = false) {
      const isDark = document.body.classList.contains('dark-mode');
      const defs = isDark ? DEFAULT_COLORS_DARK : DEFAULT_COLORS_LIGHT;
      document.querySelectorAll('.legend-color').forEach(span => {
        const v = span.dataset.var;
        let current = getComputedStyle(document.documentElement).getPropertyValue(v).trim();
        if (force || current === (isDark ? DEFAULT_COLORS_LIGHT[v] : DEFAULT_COLORS_DARK[v])) {
          document.documentElement.style.setProperty(v, defs[v]);
          span.style.background = defs[v];
        } else {
          span.style.background = current;
        }
      });
    }
    // Écouteurs pour réinitialiser les couleurs de légende
    document.querySelectorAll('.legend-reset').forEach(resetBtn => {
      resetBtn.addEventListener('click', function(e) {
        e.stopPropagation();
        const v = resetBtn.dataset.var;
        const isDark = document.body.classList.contains('dark-mode');
        const defColor = isDark ? DEFAULT_COLORS_DARK[v] : DEFAULT_COLORS_LIGHT[v];
        document.documentElement.style.setProperty(v, defColor);
        document.querySelectorAll(`.legend-color[data-var="${v}"]`).forEach(
          el => el.style.background = defColor
        );
        renderCalendar();
      });
    });
    // Choix personnalisé des couleurs de légende
    document.querySelectorAll('.legend-color').forEach(span => {
      span.addEventListener('click', function(e) {
        e.stopPropagation();
        let color = getComputedStyle(document.documentElement).getPropertyValue(span.dataset.var).trim();
        const input = document.createElement('input');
        input.type = 'color';
        input.value = rgbToHex(color);
        input.style.display = 'block';
        input.addEventListener('input', () => {
          document.documentElement.style.setProperty(span.dataset.var, input.value);
          span.style.background = input.value;
          renderCalendar();
        });
        input.click();
        setTimeout(() => input.remove(), 300);
      });
    });
  });
});

// Petit utilitaire pour convertir rgb en hex
function rgbToHex(rgb) {
  if (!rgb.startsWith('rgb')) return rgb;
  let nums = rgb.match(/\d+/g);
  if (!nums) return rgb;
  return "#" + nums.map(x => Number(x).toString(16).padStart(2, "0")).join('');
}
function openEditTransactionModal(tx) {
  document.getElementById('modal-edit-transaction').style.display = 'flex';
  document.getElementById('edit-id').value = tx.id;
  document.getElementById('edit-description').value = tx.description;
  document.getElementById('edit-amount').value = tx.amount;
  document.getElementById('edit-date').value = tx.date;
  document.getElementById('edit-type').value = tx.type;
  document.getElementById('edit-recurrence').value = tx.recurrence || 'none';

  // Met à jour la case à cocher selon la transaction
  document.getElementById('edit-apply-previous').checked = !!tx.applyPrevious;

  // --- Nouveau : simule le changement pour forcer l'affichage ---
  const event = new Event('change', { bubbles: true });
  document.getElementById('edit-recurrence').dispatchEvent(event);
}

document.getElementById('edit-cancel-btn').onclick = function() {
  document.getElementById('modal-edit-transaction').style.display = 'none';
};

document.getElementById('edit-recurrence').addEventListener('change', function() {
  document.getElementById('edit-apply-previous-row').style.display = this.value === 'monthly' ? 'flex' : 'none';
});

document.getElementById('edit-transaction-form').onsubmit = function(e) {
  e.preventDefault();
  const id = document.getElementById('edit-id').value;
  const description = document.getElementById('edit-description').value;
  const amount = parseFloat(document.getElementById('edit-amount').value);
  const date = document.getElementById('edit-date').value;
  const type = document.getElementById('edit-type').value;
  const recurrence = document.getElementById('edit-recurrence').value;
  const applyPrevious = document.getElementById('edit-apply-previous').checked;

  const idx = transactions.findIndex(tx => tx.id == id);
  if (idx !== -1) {
    transactions[idx].description = description;
    transactions[idx].amount = amount;
    transactions[idx].date = date;
    transactions[idx].type = type;
    transactions[idx].recurrence = recurrence;
    transactions[idx].applyPrevious = applyPrevious; // <--- le plus important
    saveTransactionsLocal();
    if (isDropboxConnected()) saveTransactionsDropbox();
    updateViews();
    document.getElementById('modal-edit-transaction').style.display = 'none';
  }
};

document.getElementById('modal-edit-transaction').addEventListener('click', function(e){
  if(e.target === this) this.style.display = 'none';
});
function openAddTransactionModal(dateString) {
  document.getElementById('modal-add-transaction').style.display = 'flex';
  document.getElementById('add-date').value = dateString;
  document.getElementById('add-description').value = '';
  document.getElementById('add-amount').value = '';
  document.getElementById('add-type').value = 'expense';
}

document.getElementById('add-cancel-btn').onclick = function() {
  document.getElementById('modal-add-transaction').style.display = 'none';
};

document.getElementById('add-transaction-form').onsubmit = function(e) {
  e.preventDefault();
  const description = document.getElementById('add-description').value.trim();
  const amount = parseFloat(document.getElementById('add-amount').value);
  const date = document.getElementById('add-date').value;
  const type = document.getElementById('add-type').value;
  const categoryRaw = document.getElementById('add-category').value;
  const category = categoryRaw ? JSON.parse(categoryRaw) : null;

  if (!description || isNaN(amount) || !date) {
    alert("Veuillez remplir tous les champs.");
    return;
  }

  const tx = {
    id: Date.now(),
    type,
    category,
    description,
    amount,
    date,
    recurrence: 'none',
  };

  transactions.push(tx);
  saveTransactionsLocal();
  if (isDropboxConnected()) saveTransactionsDropbox();
  updateViews();
  document.getElementById('modal-add-transaction').style.display = 'none';
};

document.getElementById('modal-add-transaction').addEventListener('click', function(e){
  if(e.target === this) this.style.display = 'none';
});

document.getElementById('modal-edit-transaction').addEventListener('click', function(e){
  if(e.target === this) this.style.display = 'none';
});

function renderMonthSummary() {
  const list = document.getElementById('month-tx-list');
  list.innerHTML = '';

  const year = currentMonth.getFullYear();
  const month = currentMonth.getMonth();

  const filtered = transactions.filter(tx => {
    const d = new Date(tx.date);
    return d.getFullYear() === year && d.getMonth() === month;
  });

  if (filtered.length === 0) {
    list.innerHTML = '<li>Aucune transaction ce mois-ci.</li>';
    return;
  }

  // Tri
  const sorted = [...filtered].sort((a, b) => {
    if (monthSortMode === 'date-asc') return new Date(a.date) - new Date(b.date);
    if (monthSortMode === 'date-desc') return new Date(b.date) - new Date(a.date);
    if (monthSortMode === 'amount-desc') return b.amount - a.amount;
    return 0;
  });

  const groupEnabled = document.getElementById('group-by-category')?.checked;

  if (groupEnabled) {
    // --- Groupement par catégorie ---
    const grouped = {};

    sorted.forEach(tx => {
      const key = tx.category?.label || 'Autre';
      if (!grouped[key]) grouped[key] = [];
      grouped[key].push(tx);
    });

    Object.keys(grouped).forEach(catLabel => {
      const txs = grouped[catLabel];

      const liCat = document.createElement('li');
      liCat.style.cursor = 'pointer';
      liCat.style.fontWeight = 'bold';
      liCat.style.display = 'flex';
      liCat.style.alignItems = 'center';
      liCat.style.gap = '0.4em';

      const arrow = document.createElement('span');
      arrow.innerHTML = '▶';
      arrow.style.transition = 'transform 0.2s';

      const container = document.createElement('ul');
      container.style.display = 'none';
      container.style.paddingLeft = '1em';

      txs.forEach(tx => {
        const txLi = document.createElement('li');
        const sign = tx.type === 'income' ? '+' : '–';
        const amount = tx.amount.toFixed(2);
        const icon = getCategoryIcon(tx.category);
        txLi.innerHTML = `${icon}<strong>${tx.description}</strong> (${tx.date}) : <em>${sign}${amount} €</em>`;
        container.appendChild(txLi);
      });

      liCat.appendChild(arrow);
      liCat.append(` ${catLabel}`);
      liCat.addEventListener('click', () => {
        const isOpen = container.style.display === 'block';
        container.style.display = isOpen ? 'none' : 'block';
        arrow.style.transform = isOpen ? 'rotate(0deg)' : 'rotate(90deg)';
      });

      list.appendChild(liCat);
      list.appendChild(container);
    });
  } else {
    // --- Affichage simple ligne par ligne ---
    sorted.forEach(tx => {
      const li = document.createElement('li');
      const sign = tx.type === 'income' ? '+' : '–';
      const amount = tx.amount.toFixed(2);
      const icon = getCategoryIcon(tx.category);
      li.innerHTML = `${icon}<strong>${tx.description}</strong> (${tx.date}) : <em>${sign}${amount} €</em>`;
      list.appendChild(li);
    });
  }
}

function getCategoryIcon(category) {
  if (!category) return '';
  if (category.type === 'fa') return `<i class="fa-solid ${category.icon}" style="margin-right:6px"></i>`;
  if (category.type === 'mi') return `<span class="material-icons" style="font-size:1em;margin-right:6px">${category.icon}</span>`;
  if (category.type === 'bs') return `<i class="bi ${category.icon}" style="margin-right:6px"></i>`;
  return '';
}

// --- Menu Profil / Réglages ---
(function setupProfileMenu() {
  const trigger = document.getElementById('profile-trigger');
  const dropdown = document.getElementById('profile-dropdown');
  if (!trigger || !dropdown) return;

  function closeMenu() {
    dropdown.style.display = 'none';
    trigger.setAttribute('aria-expanded', 'false');
  }
  function openMenu() {
    dropdown.style.display = 'block';
    trigger.setAttribute('aria-expanded', 'true');
  }

  trigger.addEventListener('click', (e) => {
    e.stopPropagation();
    const isOpen = dropdown.style.display === 'block';
    if (isOpen) closeMenu(); else openMenu();
  });

    document.addEventListener('click', (e) => {
      if (!e.target.closest('.profile-menu')) closeMenu();
    });
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') closeMenu();
      });
})();

// ===== Toggle de thème sombre (switch avec persistance) =====
(function setupThemeToggle() {
  const btn = document.getElementById('theme-toggle');
  if (!btn) return;

  const STORAGE_KEY = 'theme';
  const root = document.body;

  // Détermine le thème initial
  const saved = localStorage.getItem(STORAGE_KEY);
  const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
  const startDark = saved ? (saved === 'dark') : prefersDark;

  function applyTheme(isDark) {
    root.classList.toggle('dark-mode', isDark);
    btn.setAttribute('aria-pressed', String(isDark));
    localStorage.setItem(STORAGE_KEY, isDark ? 'dark' : 'light');
  }

  applyTheme(startDark);

  btn.addEventListener('click', () => {
    const isDark = !root.classList.contains('dark-mode');
    applyTheme(isDark);
  });

  // Si l’utilisateur change la préférence système, on s’aligne
  if (window.matchMedia) {
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
      // Respecte la préférence système uniquement si l’utilisateur n’a pas déjà choisi
      const savedNow = localStorage.getItem(STORAGE_KEY);
      if (!savedNow) applyTheme(e.matches);
    });
  }
})();

